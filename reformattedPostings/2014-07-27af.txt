Wikimedia CommonsGeorge BooleThere are two main reasons mathematics has fascinated humanity for two thousand years. First, math gives us the tools we need to understand the universe and build things. Second, the study of mathematical objects themselves can be beautiful and intriguing, even if they have no apparent practical applications. What's truly amazing is that sometimes a branch of math will start out as something completely abstract, with no immediate scientific or engineering applications, and then much later a practical use can be found. Boolean algebra is the combination of logic and algebra, initially developed by George Boole, for whom the subject is named, in the 1840s and '50s, and later refined by other logicians through the rest of the nineteenth and early twentieth centuries. Formal logic concerns itself with the truth or falseness of statements, or propositions. "Barack Obama is the President of the United States" is a proposition that is true. "Google manufactures the iPhone" is a proposition that is false. Things get more interesting when we start combining simple propositions together. "Barack Obama is the President of the United States, and Joe Biden is the Vice President" is true, since the two simple propositions joined by the "and" in the middle are both true. "Either Texas has a population of 300, or television was invented by Issac Newton" is false, since the two simple propositions joined by the "or" in the middle are both false. Boolean algebra, and other forms of abstract propositional logic, are based on dealing with compound propositions made up of simple propositions joined by logical connectors like "and", "or", and "not". All that matters for telling whether such a compound statement is true are the abstract truth values of the component propositions and formal rules based on which logical connectors we're using. For example, if proposition X is true, and proposition Y is true, then the compound proposition "X and Y" is also true. If either X or Y is false, or both are false, then "X and Y" is also false. Boole recognized that this kind of logic based on combining symbols for propositions using connectors like "and", "or", and "not" had a similar structure to normal algebra and arithmetic. In normal algebra, variables representing numbers get combined together into formulas and equations by using the arithmetic operations of addition, subtraction, multiplication, and division. In Boole's logical algebra, variables representing logical propositions get combined into formulas and equations by using the logical operations of and, or, and not. The statement "X and Y is true" gets converted into the equation X × Y = 1. The statement "X or Y is false" becomes X + Y = 0. Boolean algebra makes it possible to use the same kinds of algebraic techniques we use to solve normal equations involving numbers to establish logical relationships. By solving Boolean equations, logicians can more easily see when one combination of propositions logically leads to another. If this seems extremely abstract, it is. Logic has always straddled the line between philosophy and mathematics, attempting to reason about the way we can reason, and getting at fundamental ideas about what truth is and how to be sure we know things. While fascinating, propositional logic and Boolean algebra initially belonged strictly to the realm of pure mathematics, with fewer applications than a branch of math like differential equations and calculus, which are at the foundation of our understanding of physics.  Remarkably, about a century after Boole's initial investigations, mathematicians and scientists discovered an extremely powerful set of applications for formal logic, and now this apparently abstract mathematical and logical tool is at the heart of the global economy. Wikimedia CommonsBoolean algebra — taking true and false values, manipulating them according to logical rules, and coming up with appropriate true and false results — is the fundamental basis of the modern digital computer. One of the first major applications of Boolean algebra came from the 1937 master's thesis of Claude Shannon, one of the most important mathematicians and engineers of the 20th century. Shannon realized that switches in relay networks, like in a telephone network, or an early proto-computer, could be easily described by viewing "on" switches has having a Boolean value of "true", "off" switches as having a Boolean value of "false", and with the different patterns in which switches are connected to each other corresponding to the Boolean operations of "and", "or", and "not". Shannon's innovation made the design of switch networks vastly easier: rather than needing to actually play around with network connections themselves, the techniques developed by Boole and his successors provided a mathematical framework allowing for more efficient network layouts. The connection between electrical switches and boolean algebra goes in the other direction as well. A computer's CPU is largely built out of logic gates: physical manifestations of Boolean operators. Logic gates take in one or more electrical Boolean values: a wire with a high voltage might represent "true", and a wire with a low voltage might represent "false". The output of the logic gate, calculated using the electronic properties of semiconductors, is the appropriate voltage from the desired Boolean operation. An "and" gate, for example, takes in two inputs. If both inputs are high voltage (representing "true"), the "and" gate has a high voltage output of "true" as well, while if either or both inputs are low voltage, or false, the gate will have a low voltage output of false. Putting these gates together in the right ways allows for the execution of computer programs. Being able to perform Boolean operations on various inputs essentially allows a CPU to decide how to handle those inputs. Further, this Boolean algebra embedded in computers comes back around to normal math. The Boolean dichotomy of true vs. false lends itself nicely to the representation of binary numbers: true corresponds to 1, and false maps to 0. Under this interpretation, it's possible to assemble Boolean circuits that, simply by correctly combining two binary input numbers using and, or, and not operations, can add, subtract, multiply, or divide numbers. Sometimes, developments in pure math can, decades or centuries later, turn out to have amazing applications. FREE AppDownload
